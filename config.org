* Server
** Start emacs server
 #+BEGIN_SRC emacs-lisp
 (require 'server)
(unless (server-running-p)
  (server-start))
 #+END_SRC

* Repos
  #+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  #+END_SRC
* Settings
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq scroll-margin 10)
(setq scroll-conservatively 10000)
(setq select-enable-clipboard t)
(setq require-final-newline t)
(setq next-line-add-newlines nil)
(add-to-list 'write-file-functions 'delete-trailing-whitespace)
(fringe-mode '(8 . 0))
(setq-default indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'left)
(recentf-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
* Interface
** Basic settings
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** UTF-8
**** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Transparency
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config (evil-mode 1))

 (use-package evil-smartparens
   :ensure t
   :config
   (add-hook 'prog-mode-hook #'evil-smartparens-mode)
   (add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package evil-collection
  :ensure t
  :custom
  (evil-collection-setup-minibuffer t)
  (evil-collection-outline-bind-tab-p nil)
  :config
 (evil-collection-init))


(use-package evil-nerd-commenter
:ensure t
:bind ("M-/" . evilnc-comment-or-uncomment-lines))

(use-package evil-smartparens
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'evil-smartparens-mode)
  (add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode))
#+END_SRC
* Org
** Install
  #+BEGIN_SRC emacs-lisp

  (use-package org
  :ensure t
  :pin org)

    (setenv "BROWSER" "chromium-browser")

        (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** Easy-to-add emacs-lisp template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Reload config file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Highligh current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
* Window numbering
#+BEGIN_SRC emacs-lisp
  (use-package window-numbering
    :ensure t
    :config
    (progn
      (setq window-numbering-auto-assign-0-to-minibuffer nil)
      ;; (global-set-key (kbd "M-0") 'select-window-0)
      (global-set-key (kbd "M-1") 'select-window-1)
      (global-set-key (kbd "M-2") 'select-window-2)
      (global-set-key (kbd "M-3") 'select-window-3)
      (global-set-key (kbd "M-4") 'select-window-4)
      (global-set-key (kbd "M-5") 'select-window-5)
      (global-set-key (kbd "M-6") 'select-window-6)
      (global-set-key (kbd "M-7") 'select-window-7)
      (global-set-key (kbd "M-8") 'select-window-8)
      (global-set-key (kbd "M-9") 'select-window-9)
      (window-numbering-mode 1)))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm-lsp)
(use-package helm
  :ensure t
  :config
  (require 'helm-config)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  ;; (define-key help-map (kbd "<tab>") 'helm-execute-persistent-action)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  ;; (setq helm-locate-fuzzy-match t)
  ;; (setq helm-apropos-fuzzy-match t)
  ;; (setq helm-lisp-fuzzy-completion t)
  )

(use-package helm-swoop
  :ensure t
  :config
  (require 'helm-swoop))

(use-package helm-make
  :ensure t)

(use-package helm-gtags
  :ensure t
  :config
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-c g"
   helm-gtags-suggested-key-mapping t
   )
  ;; Enable helm-gtags-mode
  (add-hook 'lua-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)

  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

(use-package helm-themes
  :ensure t)

(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC
* Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+END_SRC
* Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
(use-package spacegray-theme :ensure t :defer t)
(use-package doom-themes
  :ensure t
  :config
  ;;(load-theme 'doom-one t)
:defer 1)
(setq doom-themes-treemacs-theme "doom-colors")
(doom-themes-treemacs-config)
(doom-themes-org-config)

(defun dw/replace-unicode-font-mapping (block-name old-font new-font)
  (let* ((block-idx (cl-position-if
                         (lambda (i) (string-equal (car i) block-name))
                         unicode-fonts-block-font-mapping))
         (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
         (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
    (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
          `(,updated-block))))

(use-package unicode-fonts
  :ensure t

  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  :config
  ;; Fix the font mappings to use the right emoji font
  (mapcar
    (lambda (block-name)
      (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
    '("Dingbats"
      "Emoticons"
      "Miscellaneous Symbols and Pictographs"
      "Transport and Map Symbols"))
  (unicode-fonts-setup))

(use-package diminish :ensure t)

(use-package minions
  :ensure t
  :hook (doom-modeline-mode . minions-mode)
  :custom
  (minions-mode-line-lighter "ï†’"))

(use-package doom-modeline
  :ensure t
  :after eshell     ;; Make sure it gets hooked after eshell
  :hook (after-init . doom-modeline-init)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))


(use-package all-the-icons
  :ensure t)
#+END_SRC
# * Dired
** Dired quick sort
#+BEGIN_SRC emacs-lisp
(use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook   'global-company-mode t))

(use-package company-quickhelp
  :ensure t
  :after company
  :config (company-quickhelp-mode))

(use-package company-c-headers
  :ensure t
  :init
  (require 'company-c-headers)
  (add-to-list 'company-backends 'company-c-headers)
  (add-to-list 'company-c-headers-path-system "/usr/include/c++/10.2.0/"))

(use-package company-jedi
:ensure t)
(defun my/python-mode-hook ()
(add-to-list 'company-backends 'company-jedi))
(add-hook 'python-mode-hook 'my/python-mode-hook)

(use-package helm-flycheck
  :ensure t
  :after flycheck)

(use-package helm-make
  :ensure t
  :bind (("C-c c c" . helm-make-projectile)
         ;; FIXME: Write a more sophisticated command that checks whether a
         ;; Makefile exists and falls back to an alternative if not.
         ("<f5>" . helm-make-projectile)))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
(add-hook 'irony-mode-hook
(lambda ()
(define-key irony-mode-map [remap completion-at-point] 'irony-completion-at-point-async)
(definr-key irony-mode-map [remap complete-symbol] 'irony-completion-at-point-async))
(irony-cdb-autosetup-compile-options)
  (global-flycheck-mode t)
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  :init
  (setq yas-snippet-dirs
	(progn
	  (dired  '("/home/napalm/.emacs.d/elpa/"))
	  (switch-to-buffer (other-buffer))
	  (set-buffer (other-buffer))
	  (dired-mark-files-regexp "yasnippet-snippets-[0-9]*\.[0-9]*")
	  (setq fname (dired-get-filename))
	  (kill-buffer (other-buffer))
	  (list fname))))
#+END_SRC
* Ggtags
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :config
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1)))))
#+END_SRC
# * Neotree
#+BEGIN_SRC emacs-lisp
 ;;  (use-package neotree
   ;;  :ensure t
    ;;:init
    ;; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
     ;;)
   #+END_SRC

* Hungry delete
  #+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  #+END_SRC
* Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t)

  ;;Hydra neotree
     (global-set-key (kbd "C-c n")
   		  (defhydra neotree
   		    ( :color blue)
   		    "neotree"
   		    ("t" neotree-toggle "neotree toggle")))


  ;; #   ;;Hydra cider
  ;; #   ;; (global-set-key (kbd "C-c c")
  ;; #   ;; 		(defhydra cider
  ;; #   ;; 		  ( :color blue)
  ;; #   ;; 		  "cider"
  ;; #   ;; 		  ("j" cider-jack-in "jack in")
  ;; #   ;; 		  ("c" cider-repl-clear-buffer "clear buffer")
  ;; #   ;; 		  ("e" cider-eval-buffer "eval buffer")))


     ;; Hydra for buffers
     (global-set-key
      (kbd "C-c b")
      (defhydra buffers
        ( :color blue)
        "buffer"
        ("b" helm-mini "buffer list")))


  ;; Hydra for recent files
     (global-set-key (kbd "C-c r")
   		  (defhydra hydra-recentf(:colr blue)
   		    "RecentFile"
   		    ("o" recentf-open-files "open")))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (require 'smartparens-config)
    (smartparens-global-mode t))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t

    :bind (("C-c g c" . magit-clone)
         ("C-c g s" . magit-status)
         ("C-c g b" . magit-blame)
         ("C-c g l" . magit-log-buffer-file)
         ("C-c g p" . magit-pull)
         ("C-c C-v" . magit-status)
         ("A-v"     . magit-status)
         ("A-w"     . magit-status)
         ("s-w"     . magit-status)
         ("C-x g"   . magit-status)
         ("C-x G"   . magit-status-with-prefix)
         ("C-A-g"   . custom-grep-find)
         ("A-r"     . magit-reflog))
    :commands (magit-status madit-get-current-nranch)
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50))


(use-package evil-magit
  :ensure t
  :after magit)

(use-package git-commit                 ; Git commit message mode
  :ensure t
  :defer t
  :config
  (remove-hook 'git-commit-finish-query-functions
               #'git-commit-check-style-conventions))

(use-package gitconfig-mode             ; Git configuration mode
  :ensure t
  :defer t
  :config (add-hook 'gitconfig-mode-hook
                    (lambda ()
                      (setf indent-tabs-mode nil
                            tab-width 4))))

(use-package gitignore-mode             ; .gitignore mode
  :ensure t
  :defer t)

(use-package gitattributes-mode         ; Git attributes mode
  :ensure t
  :defer t)

(use-package git-timemachine            ; Go back in Git time
  :ensure t
  :defer t
  :bind (("C-c g t" . git-timemachine)))

(use-package helm-gitignore             ; Generate gitignore files
  :ensure t
  :defer t
  :bind ("C-c g I" . helm-gitignore))

(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :commands (stage-or-commit)
  :bind (("C-x C-g" . git-gutter:toggle)
         ("C-x v =" . git-gutter:popup-hunk)
         ;; ("C-x p"   . git-gutter:previous-hunk)
         ;; ("C-x n"   . git-gutter:next-hunk)
         ("A-p"     . git-gutter:previous-hunk)
         ("A-n"     . git-gutter:next-hunk)
         ("C-A-p"   . git-gutter:previous-hunk)
         ("C-A-n"   . git-gutter:next-hunk-diff)
         ("C-A-c"   . stage-or-commit)
         ("C-x v s" . git-gutter:stage-hunk)
         ("C-x v r" . git-gutter:revert-hunk)
         ("C-A-r"   . git-gutter:revert-hunk))
  :init (global-git-gutter-mode +1)
  :config
  (progn
    (defun git-gutter:diff-hunk ()
      "Popup diff of current hunk."
      (interactive)
      (git-gutter:awhen (git-gutter:search-here-diffinfo git-gutter:diffinfos)
        (git-gutter:popup-hunk it)
        (git-gutter:popup-buffer-window)))


    (defun git-gutter:next-hunk-diff (&optional arg)
      (interactive "p")
      (git-gutter:next-hunk arg)
      (recenter nil)
      (git-gutter:diff-hunk))


    (defun stage-or-commit (&optional arg)
      (interactive "p")
      (if (ignore-errors (git-gutter:search-here-diffinfo git-gutter:diffinfos))
          (git-gutter:stage-hunk)
        (progn
          (save-excursion
            (magit-diff-staged)
            (magit-commit))))
      (when (functionp 'magit-update-status-on-save)
        (magit-update-status-on-save)))

#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
      (projectile-mode 1)
:config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35
          treemacs-workspace-switch-cleanup      nil
	  treemacs-show-hidden-files             nil)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)))



#+END_SRC
* Wich Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 10)
			    (projects .10)
			    (bookmarks . 10))))
  :config
  (dashboard-setup-startup-hook))
 #+END_SRC
* Irony mode
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package company-irony
  :ensure t
  :config
  (add-to-list 'company-backends 'company-irony))


(use-package flycheck-irony
  :ensure t
  :config
  (eval-after-load 'company
    '(add-hook 'flycheck-mode-hook 'flycheck-irony-setup)))

(use-package irony-eldoc
  :ensure t
  :config
  (add-hook 'irony-mode-hook #'irony-eldoc))
#+END_SRC
* Jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  ;;:config
  (setq jedi-completion-on-dot t))
#+END_SRC
* Platformio
#+BEGIN_SRC emacs-lisp
(use-package platformio-mode
:ensure t
:config
(add-hook 'c++-mode-hook (lambda ()
(platformio-conditionally-enable)
(platformio-mode 1))))
#+END_SRC

* Sly
#+BEGIN_SRC emacs-lisp
(use-package sly
:ensure t
:after lisp-mode
:bind ([f6] . sly)
:hook
(lisp-mode-local-vars . sly-editing-mode)
:init
(defvar inferior-lisp-program "sbcl"))


(use-package sly-macrostep
:ensure t
:after sly)

(use-package sly-repl-ansi-color
:ensure t
:init (push 'sly-repl-ansi-color sly-contribs))

#+END_SRC
* Meghanada(java)
#+BEGIN_SRC emacs-lisp
(use-package meghanada
:ensure t
:hook
(add-hook 'java-mode-hook
          (lambda ()
            ;; meghanada-mode on
            (meghanada-mode t)
            (flycheck-mode )
            (setq c-basic-offset 2)
            ;; use code format
            (add-hook 'before-save-hook 'meghanada-code-beautify-before-save))))
#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp
(use-package fish-completion
:ensure t
  :hook (eshell-mode . fish-completion-mode))

(use-package eshell-syntax-highlighting
:ensure t
  :after eshell-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(use-package esh-autosuggest
:ensure t
  :hook (eshell-mode . esh-autosuggest-mode)
  :config
  (setq esh-autosuggest-delay 0.5)
  (set-face-foreground 'company-preview-common "#4b5668")
  (set-face-background 'company-preview nil))

(use-package eshell-toggle
:ensure t
  :bind ("C-M-'" . eshell-toggle)
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil))
#+END_SRC
* Lisp
#+BEGIN_SRC emacs-lisp
(use-package parinfer
	:ensure t
  :hook ((clojure-mode . parinfer-mode)
         (emacs-lisp-mode . parinfer-mode)
         (common-lisp-mode . parinfer-mode)
         (scheme-mode . parinfer-mode)
         (lisp-mode . parinfer-mode))
  :config
  (setq parinfer-extensions
			'(defaults       ; should be included.
				 pretty-parens  ; different paren styles for different modes.
				 evil           ; If you use Evil.
				 smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
				 smart-yank)))  ; Yank behavior depend on mode.
#+END_SRC
* Super Save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :ensure t
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+END_SRC

(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)

* ws-butler
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
	:ensure t
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+END_SRC
* Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
:ensure t
:init (global-undo-tree-mode)
:diminish (global-undo-tree-mode))
#+END_SRC
